const opscalar = @import_module("cerebraslib/opscalar.csl");

/// Calculate the largest power of two not greater than n.
///
/// If zero, returns zero.
fn bit_floor(n: u32) u32 {
    const shift = bit_length(n >> 1);
    const mask = @as(u32, 1) << shift;
    return n & mask;
}

/// Return the number of bits necessary to represent an integer in binary,
/// excluding the sign and leading zeros.
fn bit_length(value: u32) u32 {
    const zero_correction = @as(u32, @as(bool, value));
    const num_bits = 32;
    return (num_bits - opscalar.clz32(value)) * zero_correction;
}

/// Perform fast division using bitwise operations.
///
/// Parameters
/// ----------
/// dividend : u32
///     The dividend of the division operation.
/// divisor : u32
///     The divisor of the division operation. Must be a positive integer and a
///     power of 2.
///
/// Returns
/// -------
/// u32
///     The quotient of dividing the dividend by the divisor.
fn fast_pow2_divide(dividend: u32, divisor: u32) u32 {
    @assert(@as(bool, divisor));
    // Perform fast division using right shift.
    return dividend >> opscalar.ctz32(divisor);
}

/// Perform fast mod using bitwise operations.
///
/// Parameters
/// ----------
/// dividend : u32
///     The dividend of the mod operation.
/// divisor : u32
///     The divisor of the mod operation. Must be a positive integer and a
///     power of 2.
///
/// Returns
/// -------
/// u32
///     The remainder of dividing the dividend by the divisor.
fn fast_pow2_mod(dividend: u32, divisor: u32) u32 {
    @assert(@as(bool, divisor));
    return dividend & (divisor - 1);
}

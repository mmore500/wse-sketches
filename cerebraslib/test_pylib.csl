const pylib = @import_module("cerebraslib/pylib.csl");

fn test_bit_floor() void {
    @assert(0b00000000 == pylib.bit_floor(0b00000000));
    @assert(0b00000001 == pylib.bit_floor(0b00000001));
    @assert(0b00000010 == pylib.bit_floor(0b00000010));
    @assert(0b00000010 == pylib.bit_floor(0b00000011));
    @assert(0b00000100 == pylib.bit_floor(0b00000100));
    @assert(0b00000100 == pylib.bit_floor(0b00000101));
    @assert(0b00000100 == pylib.bit_floor(0b00000110));
    @assert(0b00000100 == pylib.bit_floor(0b00000111));
    @assert(0b00001000 == pylib.bit_floor(0b00001000));
    @assert(0b00001000 == pylib.bit_floor(0b00001001));
}

fn test_bit_length() void {
    @assert(pylib.bit_length(0b0) == 0);
    @assert(pylib.bit_length(0b1) == 1);
    @assert(pylib.bit_length(0b10) == 2);
    @assert(pylib.bit_length(0b11) == 2);

    @assert(pylib.bit_length(0b101) == 3);
    @assert(pylib.bit_length(0b111) == 3);
    @assert(pylib.bit_length(0b1100) == 4);
    @assert(pylib.bit_length(0b10000) == 5);

    @assert(pylib.bit_length(0x7FFFFFFF) == 31);
    @assert(pylib.bit_length(0x7FA0873F) == 31);

    @assert(pylib.bit_length(0xFFFFFFFF) == 32);
    @assert(pylib.bit_length(0x80000000) == 32);
    @assert(pylib.bit_length(0x800A0000) == 32);
}

fn test_fast_pow2_mod() void {
    // positive dividend and power of 2
    @assert(pylib.fast_pow2_mod(1, 1) == 0);
    @assert(pylib.fast_pow2_mod(16, 1) == 0);
    @assert(pylib.fast_pow2_mod(17, 1) == 0);
    @assert(pylib.fast_pow2_mod(18, 1) == 0);

    @assert(pylib.fast_pow2_mod(1, 2) == 1);
    @assert(pylib.fast_pow2_mod(16, 2) == 0);
    @assert(pylib.fast_pow2_mod(17, 2) == 1);
    @assert(pylib.fast_pow2_mod(18, 2) == 0);

    @assert(pylib.fast_pow2_mod(1, 4) == 1);
    @assert(pylib.fast_pow2_mod(16, 4) == 0);
    @assert(pylib.fast_pow2_mod(17, 4) == 1);
    @assert(pylib.fast_pow2_mod(18, 4) == 2);

    // zero dividend
    @assert(pylib.fast_pow2_mod(0, 4) == 0);
}


fn do_test() void {
    test_bit_floor();
    test_bit_length();
    test_fast_pow2_mod();
}
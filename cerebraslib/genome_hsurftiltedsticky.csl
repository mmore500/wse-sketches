// memory layout ===============================================================
// byte 0 FITNESS (f16, 2 bytes)
// byte 1
// byte 2 COUNTER (u16, 2 bytes)
// byte 3
// byte 4 BITFIELD (8 bytes)
// byte 5
// byte 6
// byte 7
// byte 8
// byte 9
// byte 10
// byte 11
// TOTAL: 3 words -> 12 bytes

// module imports =============================================================
const random = @import_module("<random>");

const bitmanip = @import_module("cerebraslib/bitmanip.csl");
const opscalar = @import_module("cerebraslib/opscalar.csl");
const tilted = @import_module("cerebraslib/tilted_sticky.csl");

// module config specs ========================================================
const gSize: u16 = 3;
const genome_t = [gSize]u32;
const genomePtr_t = [*]u32;

// internal functions =========================================================
fn _apply_mutation(genome: genomePtr_t) void {
    // mutate fitness value
    const fitness = @ptrcast(*f16, genome).*;
    const mutated = fitness + @as(f16, random.random_normal_f32());
    @ptrcast(*f16, genome).* = mutated;
}

fn _step_instrumentation(genome: genomePtr_t) void {
    // elapse generation in bitfield
    if (opscalar.unifbool()) {
        const rank = @as(u32, @ptrcast([*]u16, genome)[1]);
        const site = tilted.pick_deposition_site(rank, 64);

        const offset_bits: u16 = 4 * 8;
        const target_bit = @as(u16, site) + offset_bits;

        bitmanip.flip_nth_bit(@ptrcast([*]u8, genome), target_bit);
    }

    // elapse generation in counter
    @ptrcast([*]u16, genome)[1] += 1;
}

// public API =================================================================
fn elapse_inheritance_of(genome: genomePtr_t) void {
    _apply_mutation(genome); _step_instrumentation(genome);
}

fn calc_fitness_of(genome: genomePtr_t) f32 {
    return @as(f32, @ptrcast(*f16, genome).*);
}

fn initialize_one(genome: genomePtr_t) void {
    const gHalfWords: u16 = gSize * 2;
    bitmanip.randomize(@ptrcast([*]u16, genome), gHalfWords);
    @ptrcast(*f16, genome).* = 0.0;
    @ptrcast([*]u16, genome)[1] = 0;
}

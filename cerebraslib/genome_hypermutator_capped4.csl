// memory layout ===============================================================
// byte 0 NETBENCOUNT (i32, 4 bytes)
// byte 1
// byte 2
// byte 3
// byte 4 DELCOUNT (u16, 2 bytes)
// byte 5
// byte 6 MUTATOR (u8, 1 byte)
// byte 7 TAG (u8, 1 byte)
// byte 8 COUNTER (u32, 4 bytes)
// byte 9
// byte 10
// byte 11
// byte 12 BITFIELD (8 bytes)
// byte 13
// byte 14
// byte 15
// byte 16
// byte 17
// byte 18
// byte 19
// TOTAL: 5 words -> 20 bytes

// module imports =============================================================
const math = @import_module("<math>");
const random = @import_module("<random>");

const bitmanip = @import_module("cerebraslib/bitmanip.csl");
const opscalar = @import_module("cerebraslib/opscalar.csl");
const tilted = @import_module("cerebraslib/dstream_tilted.csl");

// module config specs ========================================================
const gSize: u16 = 5;
const genome_t = [gSize]u32;
const genomePtr_t = [*]u32;
const nTraitVals: u16 = 2;

const sb = 0.1;
const sd = 0.1;
const Ub = 0.000001;
const Ud = 0.0001;

// internal functions =========================================================
fn _apply_mutation(genome: genomePtr_t) void {
    const mutator_strength = @as(f32, _ptr_mutator(genome).*);
    const num_ben = opscalar.poisson32(Ub * mutator_strength);
    const num_del = opscalar.poisson32(Ud * mutator_strength);

    _ptr_netbencount(genome).* += @as(i32, num_ben) - @as(i32, num_del);
    _ptr_delcount(genome).* += @as(u16, num_del);
}

fn _ptr_netbencount(genome: genomePtr_t) *i32 {
    return &@ptrcast([*]i32, genome)[0];
}

fn _ptr_delcount(genome: genomePtr_t) *u16 {
    return &@ptrcast([*]u16, genome)[2];
}

fn _ptr_mutator(genome: genomePtr_t) *u8 {
    return &@ptrcast([*]u8, genome)[6];
}

fn _ptr_counter(genome: genomePtr_t) *u32 {
    return &@ptrcast([*]u32, genome)[2];
}

fn _step_instrumentation(genome: genomePtr_t) void {
    // elapse generation in bitfield
    if (opscalar.unifbool()) {
        const rank = _ptr_counter(genome).*;
        const site = tilted.pick_deposition_site(64, rank);

        const offset_bits: u16 = 12 * 8;
        const target_bit = @as(u16, site) + offset_bits;

        bitmanip.flip_nth_bit(@ptrcast([*]u8, genome), target_bit);
    }

    // elapse generation in counter
    _ptr_counter(genome).* += 1;
}

// public API =================================================================
fn elapse_inheritance_of(genome: genomePtr_t) void {
    _apply_mutation(genome);
    _step_instrumentation(genome);
}

fn calc_fitness_of(genome: genomePtr_t) f32 {
    return math.min(@as(f32, _ptr_netbencount(genome).*), 4.0);
}

fn get_trait_value(genome: genomePtr_t) u32 {
    return @as(u32, _ptr_mutator(genome).* == 100);
}

fn initialize_one(genome: genomePtr_t) void {
    const gHalfWords: u16 = gSize * 2;
    bitmanip.randomize(@ptrcast([*]u16, genome), gHalfWords);
    _ptr_netbencount(genome).* = 0;
    _ptr_delcount(genome).* = 0;
    _ptr_counter(genome).* = 0;
    _ptr_mutator(genome).* = if (opscalar.unifbool()) 100 else 1;
}

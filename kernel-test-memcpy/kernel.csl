param memcpy_params: comptime_struct;
param peId: i16;
const memcpy = @import_module("<memcpy/memcpy>", memcpy_params);
const math = @import_module("<math>");

var genome = @zeros([3]u32);
var ptr_genome : [*]u32 = &genome;



fn dolaunch() void {

  // value: 11111111111111110000000000000000
  // stored little endian: 00000000000000001111111111111111
  genome[0] = 4294901760;

  // value: 11110000111100001111000011110000
  // stored little endian: 11110000111100001111000011110000
  genome[1] = 4042322160;

  var binary: u32 = 0;
  for(@range(u32, peId)) |i| {
    const j = @as(f32, i);
    binary += @as(u32, math.pow(@as(f32, 2.0), j));
  }
  genome[2] = binary;

  memcpy.unblock_cmd_stream();
}

comptime {
  @export_symbol(ptr_genome, "genome");
  @export_symbol(dolaunch);
  @rpc(@get_data_task_id(memcpy.LAUNCH));
}

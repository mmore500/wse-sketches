// Struct containing parameters for memcpy layout
param peId: i16;
param sendColorValue: u16;
param recvColor: color;
param memcpy_params: comptime_struct;

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// module imports
const random = @import_module("<random>");

// global output variables
var cycleCounter = @zeros([1]u16);
var ptr_cycleCounter : [*]u16 = &cycleCounter;

var recvCounter = @zeros([1]u16);
var ptr_recvCounter : [*]u16 = &recvCounter;

var genome = @zeros([1]f32);
var ptr_genome : [*]f32 = &genome;

// Opcodes for potentially updating switches
const opcode_nop = 0;
const opcode_switch_advance = 1;
const opcode_switch_reset = 2;
const opcode_teardown = 3;

// Helper function to construct the payload of the control wavelet.
// args:
//    ceFilter: a filter bit to disable transmission from the destination
//              router to the destination CE,
//    opcode: switching opcode (see comment above), and
//    data: 16-bit wavelet data
fn ctrl(ce_filter: bool, colorValue: u16, opcode: i16, data: u16) u32 {
  const six = @as(u32, 6);
  const eight = @as(u32, 8);
  const sixteen = @as(u32, 16);

  const hi_word = @as(u32, colorValue) |
                  @as(u32, opcode) << six |
                  @as(u32, ce_filter) << eight;

  const lo_word = @as(u32, data);
  return hi_word << sixteen | lo_word;
}

// self-activate with incrementing values
// until threshold reached
const cycleColor: color = @get_color(0);
const cycleTaskID: data_task_id = @get_data_task_id(cycleColor);

task cycleTask(data: u16) void {

  if (data < 4) {
  const sendDsd = @get_dsd(fabout_dsd, .{
      .extent = 1,
      .fabric_color = @get_color(sendColorValue),
      .output_queue = @get_output_queue(1)
    });
    // @fmovs(sendDsd, genome[0]);
    const genomeDsd = @get_dsd(mem1d_dsd, .{
      .tensor_access = |i|{1} -> genome[i]
    });
    @fmovs(sendDsd, genomeDsd, .{ .async = true });
  }
  if (data < 99) {
    const cycleDsd = @get_dsd(
      fabout_dsd,
      .{
        .extent = 1,
        .fabric_color = cycleColor,
        .output_queue = @get_output_queue(0),
        // .priority = .{ .low = true }
      }
    );
    var next: u16 = data + 1;
    @mov16(cycleDsd, next);
  } else {
    sys_mod.unblock_cmd_stream();
  }
  cycleCounter[0] = data;

  const controlDsd = @get_dsd(fabout_dsd, .{
      .extent = 1,
      .fabric_color = @get_color(sendColorValue),
      // Specify that this wavelet is a control wavelet
      .control = true,
    });
    // @mov32(controlDsd, 1);
}

// kickoff task
// dispatch cycleTask once

const mainTaskID: local_task_id = @get_local_task_id(1);

task mainTask() void {
  random.set_global_prng_seed(peId);

  // The task simply updates the global variable's value.
  const cycleDsd = @get_dsd(fabout_dsd, .{
      .extent = 1,
      .fabric_color = cycleColor,
    }
  );
  @mov16(cycleDsd, 0);

}

// compete received genome against resident genome and mutate
const recvTaskID: data_task_id = @get_data_task_id(recvColor);

task recvTask(data: f32) void {
  const mutated = data + random.random_f32(-1.0, 1.0);
  if (genome[0] < mutated) {
    genome[0] = mutated;
  }
  recvCounter[0] += 1;
}

fn dolaunch() void { @activate(mainTaskID); } // launched by RPC


comptime {
  // kickoff task
  @bind_local_task(mainTask, mainTaskID);

  // self-activating task
  @bind_data_task(cycleTask, cycleTaskID);
  @set_local_color_config(
    cycleColor,
    .{
      .routes = .{
        .rx = .{ RAMP },
        .tx = .{ RAMP },
      }
    }
  );

  // genome recv task
  @bind_data_task(recvTask, recvTaskID);
  @set_local_color_config(
    recvColor,
    .{
      .routes = .{
        .rx = .{ NORTH, SOUTH, EAST, WEST },
        .tx = .{ RAMP },
      }
    }
  );

  // genome send task
  @set_local_color_config(
    @get_color(sendColorValue),
    .{
      // default
      .routes = .{
        .rx = .{ RAMP },
        .tx = .{ NORTH },
      },
      .switches = .{
        .pos1 = .{ .tx = WEST },
        .pos2 = .{ .tx = EAST },
        .pos3 = .{ .tx = SOUTH },
        .current_switch_pos = 0,
        .ring_mode = true,
      },
    },
  );

  @export_symbol(ptr_cycleCounter, "cycleCounter");
  @export_symbol(ptr_recvCounter, "recvCounter");
  @export_symbol(ptr_genome, "genome");
  @export_symbol(dolaunch);

  @rpc(@get_data_task_id(sys_mod.LAUNCH)); // direct remote procedure calls
}

const std = @import("std");
const expectEqual = std.testing.expectEqual;
const expect = std.testing.expect;
const steady = @import("steady.zig");
const pylib = @import("pylib.zig");
const oeis = @import("oeis.zig");

test "test_get_num_bins" {
    try expectEqual(steady.get_num_bins(1), 0);
    try expectEqual(steady.get_num_bins(2), 1);
    try expectEqual(steady.get_num_bins(4), 2);
    try expectEqual(steady.get_num_bins(8), 4);
    try expectEqual(steady.get_num_bins(16), 8);
}

test "test_get_num_segments" {
    try expectEqual(steady.get_num_segments(1), 0);
    try expectEqual(steady.get_num_segments(2), 1);
    try expectEqual(steady.get_num_segments(4), 2);
    try expectEqual(steady.get_num_segments(8), 3);
    try expectEqual(steady.get_num_segments(16), 4);
    try expectEqual(steady.get_num_segments(32), 5);
    try expectEqual(steady.get_num_segments(64), 6);
    try expectEqual(steady.get_num_segments(128), 7);
    try expectEqual(steady.get_num_segments(256), 8);
    try expectEqual(steady.get_num_segments(512), 9);
    try expectEqual(steady.get_num_segments(1024), 10);
    try expectEqual(steady.get_num_segments(2048), 11);
}

test "test_get_nth_bin_width" {
    var surface_size: u32 = 1;
    while (surface_size <= 1 << 19) : (surface_size *= 2) {
        const num_bins = steady.get_num_bins(surface_size);
        var bins = std.ArrayList(u32).init(std.heap.page_allocator);
        defer bins.deinit();

        var n: u32 = 0;
        while (n < num_bins) : (n += 1) {
            bins.append(steady.get_nth_bin_width(n, surface_size)) catch unreachable;
        }

        if (surface_size == 1) {
            try expect(bins.items.len == 0);
            continue;
        }

        var i: usize = 1;
        while (i < bins.items.len) : (i += 1) {
            try expect(bins.items[i - 1] >= bins.items[i]);
        }
    }
}

test "test_get_nth_segment_position" {
    var surface_size: u32 = 1;
    while (surface_size <= 1 << 19) : (surface_size *= 2) {
        const num_bins = steady.get_num_bins(surface_size);
        var bins = std.ArrayList(u32).init(std.heap.page_allocator);
        defer bins.deinit();

        var n: u32 = 0;
        while (n < num_bins) : (n += 1) {
            bins.append(steady.get_nth_bin_width(n, surface_size)) catch unreachable;
        }

        var bin_positions = std.ArrayList(u32).init(std.heap.page_allocator);
        defer bin_positions.deinit();
        bin_positions.append(0) catch unreachable;

        var sum: u32 = 0;
        for (0..bins.items.len) |m| {
            sum += bins.items[m];
            bin_positions.append(sum) catch unreachable;
        }

        var s: u32 = 1;
        const num_segments = steady.get_num_segments(surface_size);
        while (s < num_segments) : (s += 1) {
            const temp: u32 = 1;
            const shift: u5 = @intCast(s - 1);
            var segment_first_bin_number: u32 = if (s > 0) temp << shift else 0;
            try expect( // zig fmt: off
                steady.get_nth_segment_position(s, surface_size) // zig fmt: off
                == bin_positions.items[segment_first_bin_number] // zig fmt: off
            );
        }

        if (surface_size > 2) {
            try expect( // zig fmt: off
                steady.get_nth_segment_position(num_segments - 1, surface_size) // zig fmt: off
                == surface_size - surface_size / 4 - 1 // zig fmt: off
            );
        }
    }
}

test "test_get_nth_segment_bin_width" {
    try expect(steady.get_nth_segment_bin_width(0, 2) == 1);
    try expect(steady.get_nth_segment_bin_width(0, 4) == 2);
    try expect(steady.get_nth_segment_bin_width(1, 4) == 1);
    try expect(steady.get_nth_segment_bin_width(0, 8) == 3);
    try expect(steady.get_nth_segment_bin_width(1, 8) == 2);
    try expect(steady.get_nth_segment_bin_width(2, 8) == 1);
    try expect(steady.get_nth_segment_bin_width(0, 16) == 4);
    try expect(steady.get_nth_segment_bin_width(1, 16) == 3);
    try expect(steady.get_nth_segment_bin_width(2, 16) == 2);
    try expect(steady.get_nth_segment_bin_width(3, 16) == 1);
    try expect(steady.get_nth_segment_bin_width(0, 32) == 5);
    try expect(steady.get_nth_segment_bin_width(1, 32) == 4);
    try expect(steady.get_nth_segment_bin_width(2, 32) == 3);
    try expect(steady.get_nth_segment_bin_width(3, 32) == 2);
    try expect(steady.get_nth_segment_bin_width(4, 32) == 1);
}

test "test_get_nth_bin_position" {
    var surface_size: u32 = 1;
    while (surface_size <= 1 << 19) : (surface_size *= 2) {
        const num_bins = steady.get_num_bins(surface_size);
        var cumulative_positions = std.ArrayList(u32).init(std.heap.page_allocator);
        defer cumulative_positions.deinit();

        // Initialize the first position to 0 to match Python's [0, *np.cumsum(bins)].
        cumulative_positions.append(0) catch unreachable;

        // Compute cumulative positions from bin widths.
        var sum: u32 = 0;
        for (0..num_bins) |n| {
            const m: u32 = @intCast(n);
            const bin_width = steady.get_nth_bin_width(m, surface_size);
            sum += bin_width;
            cumulative_positions.append(sum) catch unreachable;
        }

        // Compare the expected positions with those returned by get_nth_bin_position.
        for (0..num_bins) |n| {
            const m: u32 = @intCast(n);
            const expected_position = cumulative_positions.items[n];
            const actual_position = steady.get_nth_bin_position(m, surface_size);
            try expect(expected_position == actual_position);
        }

        // Compare the last position with get_num_positions(surface_size).
        const last_position = steady.get_num_positions(surface_size);
        try expect(cumulative_positions.items[num_bins] == last_position);
    }
}

test "test_get_bin_width_at_position" {
    try std.testing.expect(steady.get_bin_width_at_position(2184, 16384) == 5);
    try std.testing.expect(steady.get_bin_width_at_position(9542, 32768) == 4);
    try std.testing.expect(steady.get_bin_width_at_position(14914, 32768) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(27131, 32768) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(29786, 32768) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(16932, 65536) == 4);
    try std.testing.expect(steady.get_bin_width_at_position(18352, 65536) == 4);
    try std.testing.expect(steady.get_bin_width_at_position(33795, 65536) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(33943, 65536) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(45661, 65536) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(52845, 65536) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(11643, 131072) == 6);
    try std.testing.expect(steady.get_bin_width_at_position(21202, 131072) == 5);
    try std.testing.expect(steady.get_bin_width_at_position(41000, 131072) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(55778, 131072) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(68512, 131072) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(80523, 131072) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(104749, 131072) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(105507, 131072) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(110597, 131072) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(111500, 131072) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(117544, 131072) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(5426, 262144) == 8);
    try std.testing.expect(steady.get_bin_width_at_position(14172, 262144) == 7);
    try std.testing.expect(steady.get_bin_width_at_position(32693, 262144) == 5);
    try std.testing.expect(steady.get_bin_width_at_position(50151, 262144) == 4);
    try std.testing.expect(steady.get_bin_width_at_position(60044, 262144) == 4);
    try std.testing.expect(steady.get_bin_width_at_position(62588, 262144) == 4);
    try std.testing.expect(steady.get_bin_width_at_position(83492, 262144) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(107417, 262144) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(115650, 262144) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(129639, 262144) == 3);
    try std.testing.expect(steady.get_bin_width_at_position(132871, 262144) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(145965, 262144) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(173432, 262144) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(180807, 262144) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(184007, 262144) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(189151, 262144) == 2);
    try std.testing.expect(steady.get_bin_width_at_position(202189, 262144) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(224463, 262144) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(248378, 262144) == 1);
    try std.testing.expect(steady.get_bin_width_at_position(253912, 262144) == 1);
}

test "test_get_bin_number_of_position" {
    var surface_size: u32 = 1;
    for (0..16) |_| {
        // Loop from 0 to surface_size - 1 for each power of 2 up to 2^15
        for (0..surface_size - 1) |position| {
            const pos: u32 = @intCast(position);
            const bin_number = steady.get_bin_number_of_position(pos, surface_size);
            const bin_position = steady.get_nth_bin_position(bin_number, surface_size);
            const bin_width = steady.get_nth_bin_width(bin_number, surface_size);

            // Ensure the position falls within the correct bin range
            try expect(bin_position <= pos);
            try expect(pos < bin_position + bin_width);
        }
        surface_size <<= 1; // Double surface_size to get next power of 2
    }
}

test "pick deposition site smoke test" {
    const surface_sizes = [_]u32{ 8, 16, 32, 64, 128 };
    for (surface_sizes) |surface_size| {
        for (0..301) |rank| {
            const deposit_site = steady.pick_deposition_site(
                @intCast(rank), surface_size
            );
            try std.testing.expect(
                deposit_site >= 0 and deposit_site < surface_size
            );
        }
    }
}


test "pick deposition site regression test" {
    const testCases = [_][3]u32{
        [_]u32{0, 8, 1},
        [_]u32{1, 8, 2},
        [_]u32{2, 8, 4},
        [_]u32{3, 8, 3},
        [_]u32{4, 8, 6},
        [_]u32{5, 8, 5},
        [_]u32{6, 8, 7},
        [_]u32{7, 8, 1},
        [_]u32{8, 8, 6},
        [_]u32{9, 8, 6},
        [_]u32{10, 8, 4},
        [_]u32{11, 8, 4},
        [_]u32{12, 8, 7},
        [_]u32{13, 8, 7},
        [_]u32{14, 8, 2},
        [_]u32{15, 8, 2},
        [_]u32{16, 8, 6},
        [_]u32{17, 8, 6},
        [_]u32{18, 8, 6},
        [_]u32{19, 8, 6},
        [_]u32{20, 8, 5},
        [_]u32{21, 8, 5},
        [_]u32{22, 8, 5},
        [_]u32{23, 8, 5},
        [_]u32{24, 8, 7},
        [_]u32{25, 8, 7},
        [_]u32{26, 8, 7},
        [_]u32{27, 8, 7},
        [_]u32{28, 8, 3},
        [_]u32{29, 8, 3},
        [_]u32{30, 8, 3},
        [_]u32{31, 8, 3},
        [_]u32{32, 8, 6},
        [_]u32{33, 8, 6},
        [_]u32{34, 8, 6},
        [_]u32{35, 8, 6},
        [_]u32{36, 8, 6},
        [_]u32{37, 8, 6},
        [_]u32{38, 8, 6},
        [_]u32{39, 8, 6},
        [_]u32{40, 8, 4},
        [_]u32{41, 8, 4},
        [_]u32{42, 8, 4},
        [_]u32{43, 8, 4},
        [_]u32{44, 8, 4},
        [_]u32{45, 8, 4},
        [_]u32{46, 8, 4},
        [_]u32{47, 8, 4},
        [_]u32{48, 8, 7},
        [_]u32{49, 8, 7},
        [_]u32{50, 8, 7},
        [_]u32{51, 8, 7},
        [_]u32{52, 8, 7},
        [_]u32{53, 8, 7},
        [_]u32{54, 8, 7},
        [_]u32{55, 8, 7},
        [_]u32{56, 8, 1},
        [_]u32{57, 8, 1},
        [_]u32{58, 8, 1},
        [_]u32{59, 8, 1},
        [_]u32{60, 8, 1},
        [_]u32{61, 8, 1},
        [_]u32{62, 8, 1},
        [_]u32{63, 8, 1},
        [_]u32{64, 8, 6},
        [_]u32{65, 8, 6},
        [_]u32{66, 8, 6},
        [_]u32{67, 8, 6},
        [_]u32{68, 8, 6},
        [_]u32{69, 8, 6},
        [_]u32{70, 8, 6},
        [_]u32{71, 8, 6},
        [_]u32{72, 8, 6},
        [_]u32{73, 8, 6},
        [_]u32{74, 8, 6},
        [_]u32{75, 8, 6},
        [_]u32{76, 8, 6},
        [_]u32{77, 8, 6},
        [_]u32{78, 8, 6},
        [_]u32{79, 8, 6},
        [_]u32{80, 8, 5},
        [_]u32{81, 8, 5},
        [_]u32{82, 8, 5},
        [_]u32{83, 8, 5},
        [_]u32{84, 8, 5},
        [_]u32{85, 8, 5},
        [_]u32{86, 8, 5},
        [_]u32{87, 8, 5},
        [_]u32{88, 8, 5},
        [_]u32{89, 8, 5},
        [_]u32{90, 8, 5},
        [_]u32{91, 8, 5},
        [_]u32{92, 8, 5},
        [_]u32{93, 8, 5},
        [_]u32{94, 8, 5},
        [_]u32{95, 8, 5},
        [_]u32{96, 8, 7},
        [_]u32{97, 8, 7},
        [_]u32{98, 8, 7},
        [_]u32{99, 8, 7},
        [_]u32{717354021, 8, 4},
        [_]u32{1061650667, 8, 1},
        [_]u32{946286476, 8, 1},
        [_]u32{784077896, 8, 4},
        [_]u32{491263, 8, 2},
        [_]u32{550290313, 8, 6},
        [_]u32{224766667, 8, 7},
        [_]u32{1069620869, 8, 1},
        [_]u32{630311759, 8, 6},
        [_]u32{1013994432, 8, 1},
        [_]u32{396591248, 8, 5},
        [_]u32{629559425, 8, 6},
        [_]u32{799981516, 8, 4},
        [_]u32{592322119, 8, 6},
        [_]u32{410430189, 8, 7},
        [_]u32{729053692, 8, 4},
        [_]u32{630361478, 8, 6},
        [_]u32{796884249, 8, 4},
        [_]u32{166716594, 8, 6},
        [_]u32{413652244, 8, 7},
        [_]u32{726684926, 8, 4},
        [_]u32{271757669, 8, 6},
        [_]u32{795511698, 8, 4},
        [_]u32{105433556, 8, 7},
        [_]u32{878115723, 8, 7},
        [_]u32{830873852, 8, 7},
        [_]u32{550260202, 8, 6},
        [_]u32{986026652, 8, 1},
        [_]u32{117628829, 8, 1},
        [_]u32{147806606, 8, 6},
        [_]u32{732152370, 8, 4},
        [_]u32{704211524, 8, 4},
        [_]u32{718568663, 8, 4},
        [_]u32{889937879, 8, 7},
        [_]u32{252070889, 8, 2},
        [_]u32{776094449, 8, 4},
        [_]u32{602957303, 8, 6},
        [_]u32{812297694, 8, 7},
        [_]u32{850839392, 8, 7},
        [_]u32{121930838, 8, 1},
        [_]u32{217946253, 8, 7},
        [_]u32{927586281, 8, 7},
        [_]u32{937426313, 8, 7},
        [_]u32{226591751, 8, 7},
        [_]u32{272404799, 8, 6},
        [_]u32{398576445, 8, 5},
        [_]u32{826019350, 8, 7},
        [_]u32{77964601, 8, 6},
        [_]u32{542837249, 8, 6},
        [_]u32{494008192, 8, 3},
        [_]u32{621080892, 8, 6},
        [_]u32{339933393, 8, 5},
        [_]u32{365262088, 8, 5},
        [_]u32{341893848, 8, 5},
        [_]u32{167739021, 8, 6},
        [_]u32{98998899, 8, 5},
        [_]u32{729416111, 8, 4},
        [_]u32{254447594, 8, 2},
        [_]u32{550367865, 8, 6},
        [_]u32{732412360, 8, 4},
        [_]u32{422396446, 8, 7},
        [_]u32{399713351, 8, 5},
        [_]u32{734901635, 8, 4},
        [_]u32{737248710, 8, 4},
        [_]u32{892878741, 8, 7},
        [_]u32{694873649, 8, 4},
        [_]u32{142443833, 8, 6},
        [_]u32{848474627, 8, 7},
        [_]u32{824105924, 8, 7},
        [_]u32{170208024, 8, 4},
        [_]u32{281387505, 8, 6},
        [_]u32{610401323, 8, 6},
        [_]u32{801015372, 8, 4},
        [_]u32{143084570, 8, 6},
        [_]u32{363464500, 8, 5},
        [_]u32{698099024, 8, 4},
        [_]u32{78547565, 8, 6},
        [_]u32{146764659, 8, 6},
        [_]u32{619817, 8, 6},
        [_]u32{532704722, 8, 3},
        [_]u32{1025900559, 8, 1},
        [_]u32{689925184, 8, 4},
        [_]u32{1065863364, 8, 1},
        [_]u32{208285721, 8, 7},
        [_]u32{130755951, 8, 1},
        [_]u32{842391266, 8, 7},
        [_]u32{168703447, 8, 4},
        [_]u32{954017671, 8, 1},
        [_]u32{443352346, 8, 7},
        [_]u32{315096729, 8, 6},
        [_]u32{849946216, 8, 7},
        [_]u32{941622294, 8, 1},
        [_]u32{681162505, 8, 4},
        [_]u32{413056707, 8, 7},
        [_]u32{187321319, 8, 4},
        [_]u32{658719870, 8, 6},
        [_]u32{162243863, 8, 6},
        [_]u32{513207677, 8, 3},
        [_]u32{558468452, 8, 6},
        [_]u32{106512539, 8, 7},
        [_]u32{0, 32, 1},
        [_]u32{1, 32, 2},
        [_]u32{2, 32, 6},
        [_]u32{3, 32, 3},
        [_]u32{4, 32, 10},
        [_]u32{5, 32, 7},
        [_]u32{6, 32, 13},
        [_]u32{7, 32, 4},
        [_]u32{8, 32, 16},
        [_]u32{9, 32, 11},
        [_]u32{10, 32, 18},
        [_]u32{11, 32, 8},
        [_]u32{12, 32, 20},
        [_]u32{13, 32, 14},
        [_]u32{14, 32, 22},
        [_]u32{15, 32, 5},
        [_]u32{16, 32, 24},
        [_]u32{17, 32, 17},
        [_]u32{18, 32, 25},
        [_]u32{19, 32, 12},
        [_]u32{20, 32, 26},
        [_]u32{21, 32, 19},
        [_]u32{22, 32, 27},
        [_]u32{23, 32, 9},
        [_]u32{24, 32, 28},
        [_]u32{25, 32, 21},
        [_]u32{26, 32, 29},
        [_]u32{27, 32, 15},
        [_]u32{28, 32, 30},
        [_]u32{29, 32, 23},
        [_]u32{30, 32, 31},
        [_]u32{31, 32, 1},
        [_]u32{32, 32, 24},
        [_]u32{33, 32, 24},
        [_]u32{34, 32, 16},
        [_]u32{35, 32, 16},
        [_]u32{36, 32, 25},
        [_]u32{37, 32, 25},
        [_]u32{38, 32, 10},
        [_]u32{39, 32, 10},
        [_]u32{40, 32, 26},
        [_]u32{41, 32, 26},
        [_]u32{42, 32, 18},
        [_]u32{43, 32, 18},
        [_]u32{44, 32, 27},
        [_]u32{45, 32, 27},
        [_]u32{46, 32, 6},
        [_]u32{47, 32, 6},
        [_]u32{48, 32, 28},
        [_]u32{49, 32, 28},
        [_]u32{50, 32, 20},
        [_]u32{51, 32, 20},
        [_]u32{52, 32, 29},
        [_]u32{53, 32, 29},
        [_]u32{54, 32, 13},
        [_]u32{55, 32, 13},
        [_]u32{56, 32, 30},
        [_]u32{57, 32, 30},
        [_]u32{58, 32, 22},
        [_]u32{59, 32, 22},
        [_]u32{60, 32, 31},
        [_]u32{61, 32, 31},
        [_]u32{62, 32, 2},
        [_]u32{63, 32, 2},
        [_]u32{64, 32, 24},
        [_]u32{65, 32, 24},
        [_]u32{66, 32, 24},
        [_]u32{67, 32, 24},
        [_]u32{68, 32, 17},
        [_]u32{69, 32, 17},
        [_]u32{70, 32, 17},
        [_]u32{71, 32, 17},
        [_]u32{72, 32, 25},
        [_]u32{73, 32, 25},
        [_]u32{74, 32, 25},
        [_]u32{75, 32, 25},
        [_]u32{76, 32, 11},
        [_]u32{77, 32, 11},
        [_]u32{78, 32, 11},
        [_]u32{79, 32, 11},
        [_]u32{80, 32, 26},
        [_]u32{81, 32, 26},
        [_]u32{82, 32, 26},
        [_]u32{83, 32, 26},
        [_]u32{84, 32, 19},
        [_]u32{85, 32, 19},
        [_]u32{86, 32, 19},
        [_]u32{87, 32, 19},
        [_]u32{88, 32, 27},
        [_]u32{89, 32, 27},
        [_]u32{90, 32, 27},
        [_]u32{91, 32, 27},
        [_]u32{92, 32, 7},
        [_]u32{93, 32, 7},
        [_]u32{94, 32, 7},
        [_]u32{95, 32, 7},
        [_]u32{96, 32, 28},
        [_]u32{97, 32, 28},
        [_]u32{98, 32, 28},
        [_]u32{99, 32, 28},
        [_]u32{717354021, 32, 18},
        [_]u32{1061650667, 32, 1},
        [_]u32{946286476, 32, 30},
        [_]u32{784077896, 32, 6},
        [_]u32{491263, 32, 23},
        [_]u32{550290313, 32, 24},
        [_]u32{224766667, 32, 29},
        [_]u32{1069620869, 32, 1},
        [_]u32{630311759, 32, 25},
        [_]u32{1013994432, 32, 31},
        [_]u32{396591248, 32, 9},
        [_]u32{629559425, 32, 25},
        [_]u32{799981516, 32, 6},
        [_]u32{592322119, 32, 16},
        [_]u32{410430189, 32, 28},
        [_]u32{729053692, 32, 18},
        [_]u32{630361478, 32, 25},
        [_]u32{796884249, 32, 6},
        [_]u32{166716594, 32, 11},
        [_]u32{413652244, 32, 28},
        [_]u32{726684926, 32, 18},
        [_]u32{271757669, 32, 24},
        [_]u32{795511698, 32, 6},
        [_]u32{105433556, 32, 21},
        [_]u32{878115723, 32, 29},
        [_]u32{830873852, 32, 28},
        [_]u32{550260202, 32, 24},
        [_]u32{986026652, 32, 22},
        [_]u32{117628829, 32, 30},
        [_]u32{147806606, 32, 16},
        [_]u32{732152370, 32, 18},
        [_]u32{704211524, 32, 26},
        [_]u32{718568663, 32, 18},
        [_]u32{889937879, 32, 29},
        [_]u32{252070889, 32, 31},
        [_]u32{776094449, 32, 6},
        [_]u32{602957303, 32, 16},
        [_]u32{812297694, 32, 28},
        [_]u32{850839392, 32, 20},
        [_]u32{121930838, 32, 23},
        [_]u32{217946253, 32, 20},
        [_]u32{927586281, 32, 13},
        [_]u32{937426313, 32, 13},
        [_]u32{226591751, 32, 14},
        [_]u32{272404799, 32, 24},
        [_]u32{398576445, 32, 9},
        [_]u32{826019350, 32, 28},
        [_]u32{77964601, 32, 25},
        [_]u32{542837249, 32, 24},
        [_]u32{494008192, 32, 23},
        [_]u32{621080892, 32, 25},
        [_]u32{339933393, 32, 26},
        [_]u32{365262088, 32, 19},
        [_]u32{341893848, 32, 26},
        [_]u32{167739021, 32, 11},
        [_]u32{98998899, 32, 7},
        [_]u32{729416111, 32, 18},
        [_]u32{254447594, 32, 31},
        [_]u32{550367865, 32, 24},
        [_]u32{732412360, 32, 18},
        [_]u32{422396446, 32, 21},
        [_]u32{399713351, 32, 9},
        [_]u32{734901635, 32, 18},
        [_]u32{737248710, 32, 18},
        [_]u32{892878741, 32, 29},
        [_]u32{694873649, 32, 26},
        [_]u32{142443833, 32, 24},
        [_]u32{848474627, 32, 20},
        [_]u32{824105924, 32, 28},
        [_]u32{170208024, 32, 26},
        [_]u32{281387505, 32, 24},
        [_]u32{610401323, 32, 25},
        [_]u32{801015372, 32, 6},
        [_]u32{143084570, 32, 16},
        [_]u32{363464500, 32, 19},
        [_]u32{698099024, 32, 26},
        [_]u32{78547565, 32, 25},
        [_]u32{146764659, 32, 16},
        [_]u32{619817, 32, 25},
        [_]u32{532704722, 32, 5},
        [_]u32{1025900559, 32, 31},
        [_]u32{689925184, 32, 26},
        [_]u32{1065863364, 32, 1},
        [_]u32{208285721, 32, 28},
        [_]u32{130755951, 32, 3},
        [_]u32{842391266, 32, 20},
        [_]u32{168703447, 32, 26},
        [_]u32{954017671, 32, 30},
        [_]u32{443352346, 32, 29},
        [_]u32{315096729, 32, 25},
        [_]u32{849946216, 32, 20},
        [_]u32{941622294, 32, 30},
        [_]u32{681162505, 32, 26},
        [_]u32{413056707, 32, 28},
        [_]u32{187321319, 32, 27},
        [_]u32{658719870, 32, 10},
        [_]u32{162243863, 32, 11},
        [_]u32{513207677, 32, 31},
        [_]u32{558468452, 32, 24},
        [_]u32{106512539, 32, 21},
        [_]u32{0, 64, 1},
        [_]u32{1, 64, 2},
        [_]u32{2, 64, 7},
        [_]u32{3, 64, 3},
        [_]u32{4, 64, 12},
        [_]u32{5, 64, 8},
        [_]u32{6, 64, 16},
        [_]u32{7, 64, 4},
        [_]u32{8, 64, 20},
        [_]u32{9, 64, 13},
        [_]u32{10, 64, 23},
        [_]u32{11, 64, 9},
        [_]u32{12, 64, 26},
        [_]u32{13, 64, 17},
        [_]u32{14, 64, 29},
        [_]u32{15, 64, 5},
        [_]u32{16, 64, 32},
        [_]u32{17, 64, 21},
        [_]u32{18, 64, 34},
        [_]u32{19, 64, 14},
        [_]u32{20, 64, 36},
        [_]u32{21, 64, 24},
        [_]u32{22, 64, 38},
        [_]u32{23, 64, 10},
        [_]u32{24, 64, 40},
        [_]u32{25, 64, 27},
        [_]u32{26, 64, 42},
        [_]u32{27, 64, 18},
        [_]u32{28, 64, 44},
        [_]u32{29, 64, 30},
        [_]u32{30, 64, 46},
        [_]u32{31, 64, 6},
        [_]u32{32, 64, 48},
        [_]u32{33, 64, 33},
        [_]u32{34, 64, 49},
        [_]u32{35, 64, 22},
        [_]u32{36, 64, 50},
        [_]u32{37, 64, 35},
        [_]u32{38, 64, 51},
        [_]u32{39, 64, 15},
        [_]u32{40, 64, 52},
        [_]u32{41, 64, 37},
        [_]u32{42, 64, 53},
        [_]u32{43, 64, 25},
        [_]u32{44, 64, 54},
        [_]u32{45, 64, 39},
        [_]u32{46, 64, 55},
        [_]u32{47, 64, 11},
        [_]u32{48, 64, 56},
        [_]u32{49, 64, 41},
        [_]u32{50, 64, 57},
        [_]u32{51, 64, 28},
        [_]u32{52, 64, 58},
        [_]u32{53, 64, 43},
        [_]u32{54, 64, 59},
        [_]u32{55, 64, 19},
        [_]u32{56, 64, 60},
        [_]u32{57, 64, 45},
        [_]u32{58, 64, 61},
        [_]u32{59, 64, 31},
        [_]u32{60, 64, 62},
        [_]u32{61, 64, 47},
        [_]u32{62, 64, 63},
        [_]u32{63, 64, 1},
        [_]u32{64, 64, 48},
        [_]u32{65, 64, 48},
        [_]u32{66, 64, 32},
        [_]u32{67, 64, 32},
        [_]u32{68, 64, 49},
        [_]u32{69, 64, 49},
        [_]u32{70, 64, 20},
        [_]u32{71, 64, 20},
        [_]u32{72, 64, 50},
        [_]u32{73, 64, 50},
        [_]u32{74, 64, 34},
        [_]u32{75, 64, 34},
        [_]u32{76, 64, 51},
        [_]u32{77, 64, 51},
        [_]u32{78, 64, 12},
        [_]u32{79, 64, 12},
        [_]u32{80, 64, 52},
        [_]u32{81, 64, 52},
        [_]u32{82, 64, 36},
        [_]u32{83, 64, 36},
        [_]u32{84, 64, 53},
        [_]u32{85, 64, 53},
        [_]u32{86, 64, 23},
        [_]u32{87, 64, 23},
        [_]u32{88, 64, 54},
        [_]u32{89, 64, 54},
        [_]u32{90, 64, 38},
        [_]u32{91, 64, 38},
        [_]u32{92, 64, 55},
        [_]u32{93, 64, 55},
        [_]u32{94, 64, 7},
        [_]u32{95, 64, 7},
        [_]u32{96, 64, 56},
        [_]u32{97, 64, 56},
        [_]u32{98, 64, 40},
        [_]u32{99, 64, 40},
        [_]u32{717354021, 64, 53},
        [_]u32{1061650667, 64, 1},
        [_]u32{946286476, 64, 60},
        [_]u32{784077896, 64, 55},
        [_]u32{491263, 64, 29},
        [_]u32{550290313, 64, 48},
        [_]u32{224766667, 64, 43},
        [_]u32{1069620869, 64, 1},
        [_]u32{630311759, 64, 35},
        [_]u32{1013994432, 64, 62},
        [_]u32{396591248, 64, 9},
        [_]u32{629559425, 64, 35},
        [_]u32{799981516, 64, 10},
        [_]u32{592322119, 64, 22},
        [_]u32{410430189, 64, 56},
        [_]u32{729053692, 64, 25},
        [_]u32{630361478, 64, 35},
        [_]u32{796884249, 64, 10},
        [_]u32{166716594, 64, 13},
        [_]u32{413652244, 64, 40},
        [_]u32{726684926, 64, 25},
        [_]u32{271757669, 64, 48},
        [_]u32{795511698, 64, 10},
        [_]u32{105433556, 64, 57},
        [_]u32{878115723, 64, 58},
        [_]u32{830873852, 64, 41},
        [_]u32{550260202, 64, 48},
        [_]u32{986026652, 64, 61},
        [_]u32{117628829, 64, 60},
        [_]u32{147806606, 64, 20},
        [_]u32{732152370, 64, 25},
        [_]u32{704211524, 64, 37},
        [_]u32{718568663, 64, 53},
        [_]u32{889937879, 64, 43},
        [_]u32{252070889, 64, 62},
        [_]u32{776094449, 64, 55},
        [_]u32{602957303, 64, 22},
        [_]u32{812297694, 64, 56},
        [_]u32{850839392, 64, 57},
        [_]u32{121930838, 64, 61},
        [_]u32{217946253, 64, 26},
        [_]u32{927586281, 64, 19},
        [_]u32{937426313, 64, 19},
        [_]u32{226591751, 64, 59},
        [_]u32{272404799, 64, 48},
        [_]u32{398576445, 64, 9},
        [_]u32{826019350, 64, 41},
        [_]u32{77964601, 64, 34},
        [_]u32{542837249, 64, 48},
        [_]u32{494008192, 64, 61},
        [_]u32{621080892, 64, 35},
        [_]u32{339933393, 64, 52},
        [_]u32{365262088, 64, 24},
        [_]u32{341893848, 64, 52},
        [_]u32{167739021, 64, 13},
        [_]u32{98998899, 64, 7},
        [_]u32{729416111, 64, 25},
        [_]u32{254447594, 64, 62},
        [_]u32{550367865, 64, 48},
        [_]u32{732412360, 64, 25},
        [_]u32{422396446, 64, 57},
        [_]u32{399713351, 64, 9},
        [_]u32{734901635, 64, 25},
        [_]u32{737248710, 64, 25},
        [_]u32{892878741, 64, 43},
        [_]u32{694873649, 64, 37},
        [_]u32{142443833, 64, 33},
        [_]u32{848474627, 64, 57},
        [_]u32{824105924, 64, 41},
        [_]u32{170208024, 64, 52},
        [_]u32{281387505, 64, 32},
        [_]u32{610401323, 64, 50},
        [_]u32{801015372, 64, 10},
        [_]u32{143084570, 64, 49},
        [_]u32{363464500, 64, 24},
        [_]u32{698099024, 64, 37},
        [_]u32{78547565, 64, 34},
        [_]u32{146764659, 64, 49},
        [_]u32{619817, 64, 35},
        [_]u32{532704722, 64, 6},
        [_]u32{1025900559, 64, 47},
        [_]u32{689925184, 64, 37},
        [_]u32{1065863364, 64, 1},
        [_]u32{208285721, 64, 41},
        [_]u32{130755951, 64, 63},
        [_]u32{842391266, 64, 57},
        [_]u32{168703447, 64, 52},
        [_]u32{954017671, 64, 60},
        [_]u32{443352346, 64, 58},
        [_]u32{315096729, 64, 34},
        [_]u32{849946216, 64, 57},
        [_]u32{941622294, 64, 60},
        [_]u32{681162505, 64, 52},
        [_]u32{413056707, 64, 40},
        [_]u32{187321319, 64, 54},
        [_]u32{658719870, 64, 15},
        [_]u32{162243863, 64, 51},
        [_]u32{513207677, 64, 46},
        [_]u32{558468452, 64, 33},
        [_]u32{106512539, 64, 57},
        [_]u32{0, 1024, 1},
        [_]u32{1, 1024, 2},
        [_]u32{2, 1024, 11},
        [_]u32{3, 1024, 3},
        [_]u32{4, 1024, 20},
        [_]u32{5, 1024, 12},
        [_]u32{6, 1024, 28},
        [_]u32{7, 1024, 4},
        [_]u32{8, 1024, 36},
        [_]u32{9, 1024, 21},
        [_]u32{10, 1024, 43},
        [_]u32{11, 1024, 13},
        [_]u32{12, 1024, 50},
        [_]u32{13, 1024, 29},
        [_]u32{14, 1024, 57},
        [_]u32{15, 1024, 5},
        [_]u32{16, 1024, 64},
        [_]u32{17, 1024, 37},
        [_]u32{18, 1024, 70},
        [_]u32{19, 1024, 22},
        [_]u32{20, 1024, 76},
        [_]u32{21, 1024, 44},
        [_]u32{22, 1024, 82},
        [_]u32{23, 1024, 14},
        [_]u32{24, 1024, 88},
        [_]u32{25, 1024, 51},
        [_]u32{26, 1024, 94},
        [_]u32{27, 1024, 30},
        [_]u32{28, 1024, 100},
        [_]u32{29, 1024, 58},
        [_]u32{30, 1024, 106},
        [_]u32{31, 1024, 6},
        [_]u32{32, 1024, 112},
        [_]u32{33, 1024, 65},
        [_]u32{34, 1024, 117},
        [_]u32{35, 1024, 38},
        [_]u32{36, 1024, 122},
        [_]u32{37, 1024, 71},
        [_]u32{38, 1024, 127},
        [_]u32{39, 1024, 23},
        [_]u32{40, 1024, 132},
        [_]u32{41, 1024, 77},
        [_]u32{42, 1024, 137},
        [_]u32{43, 1024, 45},
        [_]u32{44, 1024, 142},
        [_]u32{45, 1024, 83},
        [_]u32{46, 1024, 147},
        [_]u32{47, 1024, 15},
        [_]u32{48, 1024, 152},
        [_]u32{49, 1024, 89},
        [_]u32{50, 1024, 157},
        [_]u32{51, 1024, 52},
        [_]u32{52, 1024, 162},
        [_]u32{53, 1024, 95},
        [_]u32{54, 1024, 167},
        [_]u32{55, 1024, 31},
        [_]u32{56, 1024, 172},
        [_]u32{57, 1024, 101},
        [_]u32{58, 1024, 177},
        [_]u32{59, 1024, 59},
        [_]u32{60, 1024, 182},
        [_]u32{61, 1024, 107},
        [_]u32{62, 1024, 187},
        [_]u32{63, 1024, 7},
        [_]u32{64, 1024, 192},
        [_]u32{65, 1024, 113},
        [_]u32{66, 1024, 196},
        [_]u32{67, 1024, 66},
        [_]u32{68, 1024, 200},
        [_]u32{69, 1024, 118},
        [_]u32{70, 1024, 204},
        [_]u32{71, 1024, 39},
        [_]u32{72, 1024, 208},
        [_]u32{73, 1024, 123},
        [_]u32{74, 1024, 212},
        [_]u32{75, 1024, 72},
        [_]u32{76, 1024, 216},
        [_]u32{77, 1024, 128},
        [_]u32{78, 1024, 220},
        [_]u32{79, 1024, 24},
        [_]u32{80, 1024, 224},
        [_]u32{81, 1024, 133},
        [_]u32{82, 1024, 228},
        [_]u32{83, 1024, 78},
        [_]u32{84, 1024, 232},
        [_]u32{85, 1024, 138},
        [_]u32{86, 1024, 236},
        [_]u32{87, 1024, 46},
        [_]u32{88, 1024, 240},
        [_]u32{89, 1024, 143},
        [_]u32{90, 1024, 244},
        [_]u32{91, 1024, 84},
        [_]u32{92, 1024, 248},
        [_]u32{93, 1024, 148},
        [_]u32{94, 1024, 252},
        [_]u32{95, 1024, 16},
        [_]u32{96, 1024, 256},
        [_]u32{97, 1024, 153},
        [_]u32{98, 1024, 260},
        [_]u32{99, 1024, 90},
        [_]u32{717354021, 1024, 854},
        [_]u32{1061650667, 1024, 1018},
        [_]u32{946286476, 1024, 963},
        [_]u32{784077896, 1024, 408},
        [_]u32{491263, 1024, 58},
        [_]u32{550290313, 1024, 774},
        [_]u32{224766667, 1024, 685},
        [_]u32{1069620869, 1024, 1022},
        [_]u32{630311759, 1024, 557},
        [_]u32{1013994432, 1024, 307},
        [_]u32{396591248, 1024, 890},
        [_]u32{629559425, 1024, 812},
        [_]u32{799981516, 1024, 893},
        [_]u32{592322119, 1024, 794},
        [_]u32{410430189, 1024, 903},
        [_]u32{729053692, 1024, 239},
        [_]u32{630361478, 1024, 557},
        [_]u32{796884249, 1024, 255},
        [_]u32{166716594, 1024, 367},
        [_]u32{413652244, 1024, 906},
        [_]u32{726684926, 1024, 603},
        [_]u32{271757669, 1024, 771},
        [_]u32{795511698, 1024, 891},
        [_]u32{105433556, 1024, 914},
        [_]u32{878115723, 1024, 675},
        [_]u32{830873852, 1024, 908},
        [_]u32{550260202, 1024, 774},
        [_]u32{986026652, 1024, 982},
        [_]u32{117628829, 1024, 704},
        [_]u32{147806606, 1024, 340},
        [_]u32{732152370, 1024, 861},
        [_]u32{704211524, 1024, 77},
        [_]u32{718568663, 1024, 599},
        [_]u32{889937879, 1024, 936},
        [_]u32{252070889, 1024, 737},
        [_]u32{776094449, 1024, 882},
        [_]u32{602957303, 1024, 41},
        [_]u32{812297694, 1024, 899},
        [_]u32{850839392, 1024, 432},
        [_]u32{121930838, 1024, 977},
        [_]u32{217946253, 1024, 53},
        [_]u32{927586281, 1024, 954},
        [_]u32{937426313, 1024, 703},
        [_]u32{226591751, 1024, 944},
        [_]u32{272404799, 1024, 194},
        [_]u32{398576445, 1024, 892},
        [_]u32{826019350, 1024, 423},
        [_]u32{77964601, 1024, 809},
        [_]u32{542837249, 1024, 515},
        [_]u32{494008192, 1024, 983},
        [_]u32{621080892, 1024, 808},
        [_]u32{339933393, 1024, 836},
        [_]u32{365262088, 1024, 860},
        [_]u32{341893848, 1024, 838},
        [_]u32{167739021, 1024, 21},
        [_]u32{98998899, 1024, 411},
        [_]u32{729416111, 1024, 239},
        [_]u32{254447594, 1024, 997},
        [_]u32{550367865, 1024, 774},
        [_]u32{732412360, 1024, 861},
        [_]u32{422396446, 1024, 658},
        [_]u32{399713351, 1024, 893},
        [_]u32{734901635, 1024, 862},
        [_]u32{737248710, 1024, 48},
        [_]u32{892878741, 1024, 447},
        [_]u32{694873649, 1024, 843},
        [_]u32{142443833, 1024, 69},
        [_]u32{848474627, 1024, 661},
        [_]u32{824105924, 1024, 649},
        [_]u32{170208024, 1024, 581},
        [_]u32{281387505, 1024, 780},
        [_]u32{610401323, 1024, 803},
        [_]u32{801015372, 1024, 414},
        [_]u32{143084570, 1024, 529},
        [_]u32{363464500, 1024, 602},
        [_]u32{698099024, 1024, 589},
        [_]u32{78547565, 1024, 212},
        [_]u32{146764659, 1024, 119},
        [_]u32{619817, 1024, 559},
        [_]u32{532704722, 1024, 1020},
        [_]u32{1025900559, 1024, 1001},
        [_]u32{689925184, 1024, 585},
        [_]u32{1065863364, 1024, 1020},
        [_]u32{208285721, 1024, 909},
        [_]u32{130755951, 1024, 754},
        [_]u32{842391266, 1024, 429},
        [_]u32{168703447, 1024, 370},
        [_]u32{954017671, 1024, 711},
        [_]u32{443352346, 1024, 678},
        [_]u32{315096729, 1024, 812},
        [_]u32{849946216, 1024, 917},
        [_]u32{941622294, 1024, 961},
        [_]u32{681162505, 1024, 581},
        [_]u32{413056707, 1024, 422},
        [_]u32{187321319, 1024, 869},
        [_]u32{658719870, 1024, 826},
        [_]u32{162243863, 1024, 821},
        [_]u32{513207677, 1024, 1001},
        [_]u32{558468452, 1024, 778},
        [_]u32{106512539, 1024, 918},
    };

    // Iterate over the test cases array
    for (testCases) |testCase| {
        const rank = testCase[0];
        const surface_size = testCase[1];
        const expected_result = testCase[2];

        const actual_result = steady.pick_deposition_site(rank, surface_size);
        try expect(actual_result == expected_result);
    }
}

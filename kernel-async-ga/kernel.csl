// Distributed genetic algorithm simulations across the processing elements
// (PEs). The kernel enables each PE to manage a local population, simulate
// generational evolution, and migrate genomes to/from neighboring PEs.
//
// main program cycle:
// 1. check N/S/E/W recv flags; for any completed,
//    - harvest genomes from completed recv buffer into population
//    - open new async request to recv from that neighbor into buffer
//    - when async recv request completes, callback task sets receive flag
// 2. elapse population generation using tournament selection; for each
//    tournament,
//    - sample two candidate parents
//    - create two offspring by copying and mutating parent genomes
//    - select the fittest offspring to replace a random population member
// 3. check N/S/E/W send flags; for any completed,
//    - update send buffer with genomes from current population
//    - open new async request to send from buffer to that neighbor
//    - when async send request completes, callback task sets send flag
// 4. trigger next iteration of main cycle

// layout parameters ==========================================================
///////////////////////////////////////////////////////////////////////////////
param nCycleAtLeast: u32;  // how many self-activation cycles to run for?
param msecAtLeast: u32;  // how many real-time milliseconds to run for?
param tscAtLeast: u32;  // how many timestamp counter ticks to run for?
param nRow: i16;  // how big is PE array?
param nCol: i16;
param popSize: u16;  // how many genomes in each local population?
param tournSize: u16;  // how many genomes compete for selection?
param genomeImpl: comptime_string;  // what genome impl should be used?
param memcpy_params: comptime_struct; // parameters for memcpy layout
param globalSeed: u16;

// module imports =============================================================
///////////////////////////////////////////////////////////////////////////////
const math = @import_module("<math>");
// memcpy module for copying data and launching functions from the host
const layout_module = @import_module("<layout>");
const memcpy = @import_module("<memcpy/memcpy>", memcpy_params);
const random = @import_module("<random>");
const time = @import_module("<time>");

const genome_ = @import_module(genomeImpl);
const population_ = @import_module("cerebraslib/population.csl", .{
  .gSize = genome_.gSize, .popSize = popSize, .tournamentSize = tournSize,
  .fitFun = genome_.calc_fitness_of,
  .inheritFun = genome_.elapse_inheritance_of,
  .initFun = genome_.initialize_one,
});
const ctrl = @import_module("cerebraslib/ctrl.csl");
const optime = @import_module("cerebraslib/optime.csl");

// global output variables ====================================================
// for end-state telemetry, ptrs are necessary for memcpy infrastructure
///////////////////////////////////////////////////////////////////////////////
var x: i16 = 0; var y: i16 = 0;  // PE array coordinates
var cycleCounter = @zeros([1]u32);  // how many self-activations cycles elapse?
var ptr_cycleCounter : [*]u32 = &cycleCounter;

var recvCounter_N = @zeros([1]u32);  // number recv's opened + number filled
var ptr_recvCounter_N : [*]u32 = &recvCounter_N;
var recvCounter_S = @zeros([1]u32);
var ptr_recvCounter_S : [*]u32 = &recvCounter_S;
var recvCounter_E = @zeros([1]u32);
var ptr_recvCounter_E : [*]u32 = &recvCounter_E;
var recvCounter_W = @zeros([1]u32);
var ptr_recvCounter_W : [*]u32 = &recvCounter_W;

var sendCounter_N = @zeros([1]u32);  // number send's opened + number filled
var ptr_sendCounter_N : [*]u32 = &sendCounter_N;
var sendCounter_S = @zeros([1]u32);
var ptr_sendCounter_S : [*]u32 = &sendCounter_S;
var sendCounter_E = @zeros([1]u32);
var ptr_sendCounter_E : [*]u32 = &sendCounter_E;
var sendCounter_W = @zeros([1]u32);
var ptr_sendCounter_W : [*]u32 = &sendCounter_W;

var genome = @zeros([population_.gSize]u32);  // samples 0th population element (convenient)
var ptr_genome : [*]u32 = &genome;

var fitness = @zeros([1]f32);  // samples 0th population element (convenient)
var ptr_fitness : [*]f32 = &fitness;

// report back layout params (sanity check)
var whoami = @zeros([1]u32); var ptr_whoami : [*]u32 = &whoami;
var whereami_x = @zeros([1]u32); var ptr_whereami_x : [*]u32 = &whereami_x;
var whereami_y = @zeros([1]u32); var ptr_whereami_y : [*]u32 = &whereami_y;

// timestamp buffers, ensure an even number for 32-bit word memcpy
var tscControlBuffer = @zeros([(time.tsc_size_words + 1) / 2]u32);
var ptr_tscControlBuffer : [*]u32 = &tscControlBuffer;
var tscEndBuffer = @zeros([(time.tsc_size_words + 1) / 2]u32);
var ptr_tscEndBuffer : [*]u32 = &tscEndBuffer;
var tscStartBuffer = @zeros([(time.tsc_size_words + 1) / 2]u32);
var ptr_tscStartBuffer : [*]u32 = &tscStartBuffer;

// task IDs ===================================================================
///////////////////////////////////////////////////////////////////////////////
const sendColor_N: color = @get_color(0);
const recvColor_S: color = @get_color(1);
const sendColor_E: color = @get_color(2);
const recvColor_W: color = @get_color(3);

const recvColor_N: color = @get_color(4);
const sendColor_S: color = @get_color(5);
const recvColor_E: color = @get_color(6);
const sendColor_W: color = @get_color(7);

const cycleColor: color = @get_color(8);
const cycleTaskID: data_task_id = @get_data_task_id(cycleColor);
// color 9 is used by RPC launcher

const sendFinalizeTaskID_N: local_task_id = @get_local_task_id(10);
const sendFinalizeTaskID_S: local_task_id = @get_local_task_id(11);
const sendFinalizeTaskID_E: local_task_id = @get_local_task_id(12);
const sendFinalizeTaskID_W: local_task_id = @get_local_task_id(13);

const recvFinalizeTaskID_N: local_task_id = @get_local_task_id(14);
const recvFinalizeTaskID_S: local_task_id = @get_local_task_id(15);
const recvFinalizeTaskID_E: local_task_id = @get_local_task_id(16);
const recvFinalizeTaskID_W: local_task_id = @get_local_task_id(17);

const recvCloseoutTaskID: local_task_id = @get_local_task_id(18);
const closeoutCycleColor: color = @get_color(19);
const closeoutCycleTaskID: data_task_id = @get_data_task_id(closeoutCycleColor);

// available: 20, 24, 25, 26, 32, 33, 34, 35
// reserved (memcpy): 21, 22, 23, 27, 28, 30
// reserved: 29, 31

// queue IDs ==================================================================
///////////////////////////////////////////////////////////////////////////////
const q_out_N: i16 = 0;  // input/output queue allocations are kind of fiddly
const q_out_S: i16 = 1;  // some hardware queues listed in docs seem to be
const q_out_E: i16 = 2;  // already in use (maybe by memcpy?)
const q_out_W: i16 = 3;  // but these seem to work

const q_in_N: i16 = 4;
const q_in_S: i16 = 5;
const q_in_E: i16 = 6;
const q_in_W: i16 = 7;

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// send tasks
// ============================================================================
// asynchronously send genomes sampled from population to neighbors
///////////////////////////////////////////////////////////////////////////////
const sendNumGenomes: u16 = 1;  // how many genomes to batch sending together?
const sendBufSize: u16 = sendNumGenomes * genome_.gSize;

// send NORTH =================================================================
var sendFlag_N: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_N = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_N = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_N[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_N() void { sendFlag_N = 1; sendCounter_N[0] += 1; }

const sendDsd_N = @get_dsd(fabout_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_N,
  .output_queue = @get_output_queue(q_out_N)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_N() void {
  @fmovs(sendDsd_N, sendBufDsd_N,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_N,  // callback on complete
    },
  );
  sendCounter_N[0] += 1;  // counter only used for telemetry
}

// send SOUTH =================================================================
var sendFlag_S: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_S = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_S = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_S[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_S() void { sendFlag_S = 1; sendCounter_S[0] += 1; }

const sendDsd_S = @get_dsd(fabout_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_S,
  .output_queue = @get_output_queue(q_out_S)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_S() void {
  @fmovs(sendDsd_S, sendBufDsd_S,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_S,  // callback on complete
    },
  );
  sendCounter_S[0] += 1;  // counter only used for telemetry
}

// send EAST =================================================================
var sendFlag_E: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_E = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_E = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_E[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_E() void { sendFlag_E = 1; sendCounter_E[0] += 1; }

const sendDsd_E = @get_dsd(fabout_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_E,
  .output_queue = @get_output_queue(q_out_E)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_E() void {
  @fmovs(sendDsd_E, sendBufDsd_E,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_E,  // callback on complete
    },
  );
  sendCounter_E[0] += 1;  // counter only used for telemetry
}

// send WEST =================================================================
var sendFlag_W: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_W = @zeros([sendBufSize]u32);  // hold genomes being sent
const sendBufDsd_W = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendBufSize} -> sendBuf_W[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_W() void { sendFlag_W = 1; sendCounter_W[0] += 1; }

const sendDsd_W = @get_dsd(fabout_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_W,
  .output_queue = @get_output_queue(q_out_W)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_W() void {
  @fmovs(sendDsd_W, sendBufDsd_W,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_W,  // callback on complete
    },
  );
  sendCounter_W[0] += 1;  // counter only used for telemetry
}

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// recv tasks
// ============================================================================
// asynchronously accept genomes from neighbors,
// which are then harvested from buffer & immigrated into the population
///////////////////////////////////////////////////////////////////////////////
const recvNumGenomes: u16 = 4;  // how many genomes to batch together?
// how many receives to batch together?
const recvBufSize: u16 = genome_.gSize * recvNumGenomes;

// recv NORTH =================================================================
var recvFlag_N: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_N = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_N = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_N[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_N() void { recvFlag_N = 1; recvCounter_N[0] += 1; }

const recvDsd_N = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_N,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_N)
});
// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_N() void {
  @fmovs(recvBufDsd_N, recvDsd_N,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_N,  // callback on complete
      .on_control = .{ .activate = recvCloseoutTaskID },
    },
  );
  recvCounter_N[0] += 1;  // counter only used for telemetry
}

// recv SOUTH =================================================================
var recvFlag_S: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_S = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_S = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_S[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_S() void { recvFlag_S = 1; recvCounter_S[0] += 1; }

const recvDsd_S = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_S,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_S)
});
// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_S() void {
  @fmovs(recvBufDsd_S, recvDsd_S,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_S,  // callback on complete
      .on_control = .{ .activate = recvCloseoutTaskID },
    },
  );
  recvCounter_S[0] += 1;  // counter only used for telemetry
}

// recv EAST ==================================================================
var recvFlag_E: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_E = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_E = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_E[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_E() void { recvFlag_E = 1; recvCounter_E[0] += 1; }

const recvDsd_E = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_E,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_E)
});
// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_E() void {
  @fmovs(recvBufDsd_E, recvDsd_E,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_E,  // callback on complete
      .on_control = .{ .activate = recvCloseoutTaskID },
    },
  );
  recvCounter_E[0] += 1;  // counter only used for telemetry
}

// recv WEST ==================================================================
var recvFlag_W: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_W = @zeros([recvBufSize]u32);  // hold genomes being received
const recvBufDsd_W = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_W[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_W() void { recvFlag_W = 1; recvCounter_W[0] += 1; }

const recvDsd_W = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_W,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_W)
});
fn dispatchRecv_W() void {
  @fmovs(recvBufDsd_W, recvDsd_W,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_W,  // callback on complete
      .on_control = .{ .activate = recvCloseoutTaskID },
    },
  );
  recvCounter_W[0] += 1;  // counter only used for telemetry
}

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// closeout task
// ============================================================================
// when PEs' sends are complete, send closeout control signals to interrupt
// neighbors' receives; once all PEs' receives are interrupted, terminate
///////////////////////////////////////////////////////////////////////////////
var closeoutRemaining: u8 = 0;  // configured in setup
task recvCloseoutTask() void { closeoutRemaining -= 1; }

// closeout NORTH =============================================================
const sendCtrlDsd_N = @get_dsd(mem1d_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_N, .control = true,
});
fn closeoutSend_N() void { @mov32(sendCtrlDsd_N, 0); }

// closeout SOUTH =============================================================
const sendCtrlDsd_S = @get_dsd(mem1d_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_S, .control = true,
});
fn closeoutSend_S() void { @mov32(sendCtrlDsd_S, 0); }

// closeout EAST =============================================================
const sendCtrlDsd_E = @get_dsd(mem1d_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_E, .control = true,
});
fn closeoutSend_E() void { @mov32(sendCtrlDsd_E, 0); }

// closeout WEST =============================================================
const sendCtrlDsd_W = @get_dsd(mem1d_dsd, .{
  .extent = sendBufSize, .fabric_color = sendColor_W, .control = true,
});
fn closeoutSend_W() void { @mov32(sendCtrlDsd_W, 0); }

const closeoutCycleDsd = @get_dsd(fabout_dsd, .{
  .extent = 1, .fabric_color = closeoutCycleColor,
});
task closeoutCycleTask(_: u16) void {
  if (@as(bool, closeoutRemaining)) {
    @mov16(closeoutCycleDsd, 0);  // send wavelet to self, trigger next cycle
  } else {
    memcpy.unblock_cmd_stream();  // terminate
  }
}
///////////////////////////////////////////////////////////////////////////////

// halt condition ============================================================
fn shouldHalt(cycle: u32) bool {
  const nCycleOk = cycle >= nCycleAtLeast;
  return nCycleOk;
  // const msecOk = optime.has_elapsed_ms_(
  //   msecAtLeast,
  //   @ptrcast(*[3]u16, &tscStartBuffer),
  // );
  // const tscOk = optime.has_elapsed_tsc_(
  //   tscAtLeast,
  //   @ptrcast(*[3]u16, &tscStartBuffer),
  // );
  // return nCycleOk and msecOk and tscOk;
}

// cycle task =================================================================
// main program loop: self-activate with incrementing values until nCycleAtLeast
///////////////////////////////////////////////////////////////////////////////
const cycleDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = cycleColor,
  },
);
const cooldownDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = cooldownColor,
  },
);
task cycleTask(_: u16) void {
  // handle recv flags, pull recv buffer into pop and start next async recv
  // --------------------------------------------------------------------------
  if (@as(bool, recvFlag_N)) {  // has open recv request been filled?
    population_.immigrate_genomes(recvBufDsd_N, recvNumGenomes);
    dispatchRecv_N();  // note: never-filled recv requests on PE array edges ok
    recvFlag_N = 0;  // open send request has been handled, unset flag
  }
  if (@as(bool, recvFlag_S)) {
    population_.immigrate_genomes(recvBufDsd_S, recvNumGenomes);
    dispatchRecv_S();
    recvFlag_S = 0;  // open send request has been handled, unset flag
  }
  if (@as(bool, recvFlag_E)) {
    population_.immigrate_genomes(recvBufDsd_E, recvNumGenomes);
    dispatchRecv_E();
    recvFlag_E = 0;  // open send request has been handled, unset flag
  }
  if (@as(bool, recvFlag_W)) {
    population_.immigrate_genomes(recvBufDsd_W, recvNumGenomes);
    dispatchRecv_W();
    recvFlag_W = 0;  // open send request has been handled, unset flag
  }

  // apply replication/selection to population
  // --------------------------------------------------------------------------
  population_.do_generation();
  // sample 0th element of population for telemetry
  for(@range(u16, population_.gSize)) |i| {
    genome[i] = population_._get_ith_genome(0)[i];
  }
  fitness[0] = population_._calc_ith_fitness(0);

  // handle send flags, load send buffer from pop and start next async send
  // --------------------------------------------------------------------------
  // must stagger send requests, or else hardware simulation hangs
  // (but only when both vertical AND horizontal exchange enabled)
  // don't know why, but this is a workaround...
  // edit: found that randomizing works better to preserve long term stability
  const isEvenCycle: bool = @random16() & 1 == 0;
  const isOddCycle: bool = !isEvenCycle;
  if (isEvenCycle and @as(bool, sendFlag_N) and y != 0) {  // except top PE row
    population_.emigrate_genomes(sendBufDsd_N, sendNumGenomes);
    dispatchSend_N();
    sendFlag_N = 0;  // open send request has been handled, unset flag
  }
  if (isOddCycle and @as(bool, sendFlag_S) and y != nRow - 1) {
    // except bottom PE row
    population_.emigrate_genomes(sendBufDsd_S, sendNumGenomes);
    dispatchSend_S();
    sendFlag_S = 0;  // open send request has been handled, unset flag
  }
  if (isEvenCycle and @as(bool, sendFlag_E) and x != nCol - 1) {
    // except right col of PE array
    population_.emigrate_genomes(sendBufDsd_E, sendNumGenomes);
    dispatchSend_E();
    sendFlag_E = 0;  // open send request has been handled, unset flag
  }
  if (isOddCycle and @as(bool, sendFlag_W) and x != 0) {
    // except left col of PE array
    population_.emigrate_genomes(sendBufDsd_W, sendNumGenomes);
    dispatchSend_W();
    sendFlag_W = 0;  // open send request has been handled, unset flag
  }

  // trigger next cycle
  // --------------------------------------------------------------------------
  const cycle = cycleCounter[0];
  if (!shouldHalt(cycle)) {
    cycleCounter[0] = cycle + 1;  // for telemetry
    @mov16(cycleDsd, 0);  // send wavelet to self, trigger next cycle
  } else {
    time.get_timestamp(@ptrcast(*[3]u16, &tscEndBuffer));
    @mov16(closeoutCycleDsd, 0);  // send wavelet to self, trigger closeout cycle
 }
}

// launcher ===================================================================
///////////////////////////////////////////////////////////////////////////////
// appears to prevent hardware simulation crash, will consume different
// numbers of cycles on different PEs at launch to desynchronize them at startup
fn desync() void { for (@range(u16, @random16() % 256)) |i| { @random16(); } }

fn dolaunch() void {  // launched by RPC (remote procedure call)
  time.enable_tsc();
  // record layout params for telemetry
  x = @as(i16, layout_module.get_x_coord());
  y = @as(i16, layout_module.get_y_coord());
  closeoutRemaining = (  // how many neighbors should confirm closeout?
    @as(u8, y != 0)
    + @as(u8, y != nRow - 1)
    + @as(u8, x != 0)
    + @as(u8, x != nCol - 1)
  );
  whereami_x[0] = @as(u32, layout_module.get_x_coord());
  whereami_y[0] = @as(u32, layout_module.get_y_coord());
  whoami[0] = whereami_y[0] * @as(u32, nCol) + whereami_x[0];
  // + 1 ensures nonzero local seed
  const localSeed = (
    @as(u32, globalSeed) * @as(u32, nRow) * @as(u32, nCol) + whoami[0] + 1
  );
  random.set_global_prng_seed(localSeed);  // zero seed seems to break RNG...
  desync();
  population_.init_module();
  dispatchRecv_N();  // open initial recv requests
  dispatchRecv_S();  // note: never-filled recv requests on PE array edges ok
  dispatchRecv_E();
  dispatchRecv_W();
  @mov16(cycleDsd, 0);  // send wavelet to self, trigger first cycle
  @ptrcast(*[3]u16, &tscControlBuffer).*[0] = 507;
  @ptrcast(*[3]u16, &tscControlBuffer).*[1] = 3;
  @ptrcast(*[3]u16, &tscControlBuffer).*[2] = 7;
  time.get_timestamp(@ptrcast(*[3]u16, &tscStartBuffer));
}

// bind tasks =================================================================
///////////////////////////////////////////////////////////////////////////////
comptime {
  @bind_local_task(sendFinalizeTask_N, sendFinalizeTaskID_N);
  @bind_local_task(sendFinalizeTask_S, sendFinalizeTaskID_S);
  @bind_local_task(sendFinalizeTask_E, sendFinalizeTaskID_E);
  @bind_local_task(sendFinalizeTask_W, sendFinalizeTaskID_W);
  @bind_local_task(recvFinalizeTask_N, recvFinalizeTaskID_N);
  @bind_local_task(recvFinalizeTask_S, recvFinalizeTaskID_S);
  @bind_local_task(recvFinalizeTask_E, recvFinalizeTaskID_E);
  @bind_local_task(recvFinalizeTask_W, recvFinalizeTaskID_W);
  @bind_data_task(cycleTask, cycleTaskID);
  @bind_data_task(closeoutCycleTask, closeoutCycleTaskID);
}

// wavlet routing =============================================================
///////////////////////////////////////////////////////////////////////////////
comptime {
  // RAMP means send from router into the computing elmeent or vice versa
  @set_local_color_config(  // make cycle task wavelet bounce back from router
    cycleColor,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ RAMP } } },
  );
  @set_local_color_config(  // make cycle task wavelet bounce back from router
    closeoutCycleColor,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ RAMP } } },
  );

  // NORTH / SOUTH (vertical)
  // note use of color swaps: neighbor's outgoing color -> PE's incoming color
  @set_local_color_config(
    sendColor_N,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ NORTH }, .color_swap_y = true } },
  );
  @set_local_color_config(
    sendColor_S,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ SOUTH }, .color_swap_y = true } },
  );
  @set_local_color_config(
    recvColor_N,
    .{ .routes = .{ .rx = .{ NORTH }, .tx = .{ RAMP }, .color_swap_y = true } },
  );
  @set_local_color_config(
    recvColor_S,
    .{ .routes = .{ .rx = .{ SOUTH }, .tx = .{ RAMP }, .color_swap_y = true } },
  );

  // EAST / WEST (horizontal)
  // note use of color swaps: neighbor's outgoing color -> PE's incoming color
  @set_local_color_config(
    sendColor_E,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST }, .color_swap_x = true } },
  );
  @set_local_color_config(
    sendColor_W,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ WEST }, .color_swap_x = true } },
  );
  @set_local_color_config(
    recvColor_E,
    .{ .routes = .{ .rx = .{ EAST }, .tx = .{ RAMP }, .color_swap_x = true } },
  );
  @set_local_color_config(
    recvColor_W,
    .{ .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP }, .color_swap_x = true } },
  );
}

// symbol exports =============================================================
///////////////////////////////////////////////////////////////////////////////
comptime {  // symbols let memcpy gather end-state data from device to host
  @export_symbol(ptr_cycleCounter, "cycleCounter");
  @export_symbol(ptr_recvCounter_N, "recvCounter_N");
  @export_symbol(ptr_recvCounter_S, "recvCounter_S");
  @export_symbol(ptr_recvCounter_E, "recvCounter_E");
  @export_symbol(ptr_recvCounter_W, "recvCounter_W");
  @export_symbol(ptr_sendCounter_N, "sendCounter_N");
  @export_symbol(ptr_sendCounter_S, "sendCounter_S");
  @export_symbol(ptr_sendCounter_E, "sendCounter_E");
  @export_symbol(ptr_sendCounter_W, "sendCounter_W");
  @export_symbol(ptr_fitness, "fitness");
  @export_symbol(ptr_genome, "genome");
  @export_symbol(ptr_whoami, "whoami");
  @export_symbol(ptr_whereami_x, "whereami_x");
  @export_symbol(ptr_whereami_y, "whereami_y");
  @export_symbol(ptr_tscControlBuffer, "tscControlBuffer");
  @export_symbol(ptr_tscEndBuffer, "tscEndBuffer");
  @export_symbol(ptr_tscStartBuffer, "tscStartBuffer");
  @export_symbol(dolaunch);

  @rpc(@get_data_task_id(memcpy.LAUNCH)); // direct remote procedure calls
}

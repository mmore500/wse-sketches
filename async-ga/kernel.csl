// layout parameters ==========================================================
///////////////////////////////////////////////////////////////////////////////
param peId: i16;  // uid among PEs
param x: i16;  // position within PE array
param y: i16;
param ncycle: u16;  // how many self-activation cycles to run for?
param nrow: i16;  // how big is PE array?
param ncol: i16;
param memcpy_params: comptime_struct; // parameters for memcpy layout

// module imports =============================================================
///////////////////////////////////////////////////////////////////////////////
// memcpy module for copying data and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

const math = @import_module("<math>");
const random = @import_module("<random>");

// global output variables ====================================================
// for end-state telemetry, ptrs are necessary for memcpy infrastructure
///////////////////////////////////////////////////////////////////////////////
var cycleCounter = @zeros([1]u16);  // how many self-activations cycles elapse?
var ptr_cycleCounter : [*]u16 = &cycleCounter;

var recvCounter_N = @zeros([1]u16);  // number recv's opened + number filled
var ptr_recvCounter_N : [*]u16 = &recvCounter_N;
var recvCounter_S = @zeros([1]u16);
var ptr_recvCounter_S : [*]u16 = &recvCounter_S;
var recvCounter_E = @zeros([1]u16);
var ptr_recvCounter_E : [*]u16 = &recvCounter_E;
var recvCounter_W = @zeros([1]u16);
var ptr_recvCounter_W : [*]u16 = &recvCounter_W;

var sendCounter_N = @zeros([1]u16);  // number send's opened + number filled
var ptr_sendCounter_N : [*]u16 = &sendCounter_N;
var sendCounter_S = @zeros([1]u16);
var ptr_sendCounter_S : [*]u16 = &sendCounter_S;
var sendCounter_E = @zeros([1]u16);
var ptr_sendCounter_E : [*]u16 = &sendCounter_E;
var sendCounter_W = @zeros([1]u16);
var ptr_sendCounter_W : [*]u16 = &sendCounter_W;

var genome = @zeros([1]f32);  // samples 0th poopulation element (convenient)
var ptr_genome : [*]f32 = &genome;

// report back layout params (sanity check)
var whoami = @zeros([1]i16); var ptr_whoami : [*]i16 = &whoami;
var whereami_x = @zeros([1]i16); var ptr_whereami_x : [*]i16 = &whereami_x;
var whereami_y = @zeros([1]i16); var ptr_whereami_y : [*]i16 = &whereami_y;

const popSize: u16 = 64;
var population = @zeros([popSize]f32);  // holds population during simulation
const populationDsd = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{1} -> population[i],
});
var ptr_population: [*]f32 = &population;  // unused atm, genome is convenient

// task IDs ===================================================================
///////////////////////////////////////////////////////////////////////////////
const sendColor_N: color = @get_color(0);
const recvColor_S: color = @get_color(1);
const sendColor_E: color = @get_color(2);
const recvColor_W: color = @get_color(3);

const recvColor_N: color = @get_color(4);
const sendColor_S: color = @get_color(5);
const recvColor_E: color = @get_color(6);
const sendColor_W: color = @get_color(7);

const cycleColor: color = @get_color(8);
const cycleTaskID: data_task_id = @get_data_task_id(cycleColor);
// color 9 is used by RPC launcher

const sendFinalizeTaskID_N: local_task_id = @get_local_task_id(14);
const sendFinalizeTaskID_S: local_task_id = @get_local_task_id(15);
const sendFinalizeTaskID_E: local_task_id = @get_local_task_id(16);
const sendFinalizeTaskID_W: local_task_id = @get_local_task_id(17);

const recvFinalizeTaskID_N: local_task_id = @get_local_task_id(10);
const recvFinalizeTaskID_S: local_task_id = @get_local_task_id(11);
const recvFinalizeTaskID_E: local_task_id = @get_local_task_id(12);
const recvFinalizeTaskID_W: local_task_id = @get_local_task_id(13);

// queue IDs ==================================================================
///////////////////////////////////////////////////////////////////////////////
const q_out_N: i16 = 0;  // input/output queue allocations are kind of fiddly
const q_out_S: i16 = 3;  // some hardware queues listed in docs seem to be
const q_out_E: i16 = 2;  // already in use (maybe by memcpy?)
const q_out_W: i16 = 1;  // but these seem to work

const q_in_N: i16 = 7;
const q_in_S: i16 = 6;
const q_in_E: i16 = 5;
const q_in_W: i16 = 4;

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// send tasks
// ============================================================================
// asynchronously send genomes sampled from population to neighbors
///////////////////////////////////////////////////////////////////////////////
const sendBufSize: u16 = popSize;
const sendNum: u16 = 2;  // how many sends to batch together?

// send NORTH =================================================================
var sendFlag_N: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_N = @zeros([sendBufSize]f32);  // hold genomes being sent
const sendBufDsd_N = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendNum} -> sendBuf_N[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_N() void { sendFlag_N = 1; sendCounter_N[0] += 1; }

const sendDsd_N = @get_dsd(fabout_dsd, .{
  .extent = sendNum, .fabric_color = sendColor_N,
  .output_queue = @get_output_queue(q_out_N)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_N() void {
  @fmovs(
    sendDsd_N, sendBufDsd_N,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_N,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  sendCounter_N[0] += 1;  // counter only used for telemetry
}

// send SOUTH =================================================================
var sendFlag_S: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_S = @zeros([sendBufSize]f32);  // hold genomes being sent
const sendBufDsd_S = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendNum} -> sendBuf_S[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_S() void { sendFlag_S = 1; sendCounter_S[0] += 1; }

const sendDsd_S = @get_dsd(fabout_dsd, .{
  .extent = sendNum, .fabric_color = sendColor_S,
  .output_queue = @get_output_queue(q_out_S)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_S() void {
  @fmovs(
    sendDsd_S, sendBufDsd_S,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_S,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  sendCounter_S[0] += 1;  // counter only used for telemetry
}

// send EAST =================================================================
var sendFlag_E: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_E = @zeros([sendBufSize]f32);  // hold genomes being sent
const sendBufDsd_E = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendNum} -> sendBuf_E[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_E() void { sendFlag_E = 1; sendCounter_E[0] += 1; }

const sendDsd_E = @get_dsd(fabout_dsd, .{
  .extent = sendNum, .fabric_color = sendColor_E,
  .output_queue = @get_output_queue(q_out_E)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_E() void {
  @fmovs(
    sendDsd_E, sendBufDsd_E,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_E,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  sendCounter_E[0] += 1;  // counter only used for telemetry
}

// send WEST =================================================================
var sendFlag_W: u8 = 1;  // need refill? initialize 1 to trigger first fill
var sendBuf_W = @zeros([sendBufSize]f32);  // hold genomes being sent
const sendBufDsd_W = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{sendNum} -> sendBuf_W[i],
});

// callback for when send is complete, set flag to trigger refill & next send
task sendFinalizeTask_W() void { sendFlag_W = 1; sendCounter_W[0] += 1; }

const sendDsd_W = @get_dsd(fabout_dsd, .{
  .extent = sendNum, .fabric_color = sendColor_W,
  .output_queue = @get_output_queue(q_out_W)
});
// open an async microthread to send from sendBuf to neighbor
fn dispatchSend_W() void {
  @fmovs(
    sendDsd_W, sendBufDsd_W,
    .{
      .async = true,
      .activate = sendFinalizeTaskID_W,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  sendCounter_W[0] += 1;  // counter only used for telemetry
}

///////////////////////////////////////////////////////////////////////////////
// ============================================================================
// recv tasks
// ============================================================================
// asynchronously accept genomes from neighbors,
// which are then harvested from buffer & immigrated into the population
///////////////////////////////////////////////////////////////////////////////
const recvBufSize: u16 = 4; // how many receives to batch together?

// recv NORTH =================================================================
var recvFlag_N: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_N = @zeros([recvBufSize]f32);  // hold genomes being received
const recvBufDsd_N = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_N[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_N() void { recvFlag_N = 1; recvCounter_N[0] += 1; }

const recvDsd_N = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_N,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_N)
});
// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_N() void {
  @fmovs(
    recvBufDsd_N, recvDsd_N,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_N,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  recvCounter_N[0] += 1;  // counter only used for telemetry
}

// recv SOUTH =================================================================
var recvFlag_S: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_S = @zeros([recvBufSize]f32);  // hold genomes being received
const recvBufDsd_S = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_S[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_S() void { recvFlag_S = 1; recvCounter_S[0] += 1; }

const recvDsd_S = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_S,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_S)
});
// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_S() void {
  @fmovs(
    recvBufDsd_S, recvDsd_S,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_S,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  recvCounter_S[0] += 1;  // counter only used for telemetry
}

// recv EAST ==================================================================
var recvFlag_E: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_E = @zeros([recvBufSize]f32);  // hold genomes being received
const recvBufDsd_E = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_E[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_E() void { recvFlag_E = 1; recvCounter_E[0] += 1; }

const recvDsd_E = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_E,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_E)
});
// open an async microthread to recv from neighbor into recvBuf
fn dispatchRecv_E() void {
  @fmovs(
    recvBufDsd_E, recvDsd_E,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_E,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  recvCounter_E[0] += 1;  // counter only used for telemetry
}

// recv WEST ==================================================================
var recvFlag_W: u8 = 0;  // need harvest? init 0 (first, do naked dispatchRecv)
var recvBuf_W = @zeros([recvBufSize]f32);  // hold genomes being received
const recvBufDsd_W = @get_dsd(mem1d_dsd, .{
  .tensor_access = |i|{recvBufSize} -> recvBuf_W[i],
});

// callback when recv is complete, set flag to
// 1) trigger immigration from recv buffer into pop and 2) open next recv
task recvFinalizeTask_W() void { recvFlag_W = 1; recvCounter_W[0] += 1; }

const recvDsd_W = @get_dsd(fabin_dsd, .{
  .fabric_color = recvColor_W,
  .extent = recvBufSize,
  .input_queue = @get_input_queue(q_in_W)
});
fn dispatchRecv_W() void {
  @fmovs(
    recvBufDsd_W, recvDsd_W,
    .{
      .async = true,
      .activate = recvFinalizeTaskID_W,  // callback on complete
      .priority = .{ .high = true },
    },
  );
  recvCounter_W[0] += 1;  // counter only used for telemetry
}

// population update ops ======================================================
///////////////////////////////////////////////////////////////////////////////
fn immigrate_into_population(genome_: f32) void {
  const target = @as(u16, random.random_f16(0.0, @as(f16, popSize)));
  // @assert(0 <= target and target < popSize);  // makes slow
  population[target] = math.max(population[target], genome_);
}

// generational turnover
fn do_population_generation() void {
  for (@range(u16, 32)) |tournament| {  // each loop is one tournament
    const parent1 = @as(i16, random.random_f16(0.0, @as(f16, popSize)));
    // @assert(0 <= parent1 and parent1 < popSize);  // makes slow
    const parent2 = @as(i16, random.random_f16(0.0, @as(f16, popSize)));
    // @assert(0 <= parent2 and parent2 < popSize); // makes slow

    const offspring1: f32 = population[parent1] + random.random_normal_f32();
    const offspring2: f32 = population[parent2] + random.random_normal_f32();

    const target = @as(i16, random.random_f16(0.0, @as(f16, popSize)));
    // @assert(0 <= target and target < popSize); // makes slow
    population[target] = math.max(offspring1, offspring2);  // tourn size 2
  }
  genome[0] = population[0];  // sample 0th element of population for telemetry
}

// cycle task =================================================================
// main program loop: self-activate with incrementing values until ncycle
///////////////////////////////////////////////////////////////////////////////
const cycleDsd = @get_dsd(fabout_dsd, .{
    .extent = 1,
    .fabric_color = cycleColor,
  },
);

task cycleTask(data: u16) void {
  // handle recv flags, pull recv buffer into pop and start next async recv
  // --------------------------------------------------------------------------
  if (@as(bool, recvFlag_N)) {  // has open recv request ben filled?
    @map(immigrate_into_population, recvBufDsd_N);  // incorporate into pop
    dispatchRecv_N();  // note: never-filled recv requests on PE array edges ok
    recvFlag_N = 0;  // open send request has been handled, unset flag
  }
  if (@as(bool, recvFlag_S)) {
    @map(immigrate_into_population, recvBufDsd_S);  // incorporate into pop
    dispatchRecv_S();
    recvFlag_S = 0;  // open send request has been handled, unset flag
  }
  if (@as(bool, recvFlag_E)) {
    @map(immigrate_into_population, recvBufDsd_E);  // incorporate into pop
    dispatchRecv_E();
    recvFlag_E = 0;  // open send request has been handled, unset flag
  }
  if (@as(bool, recvFlag_W)) {
    @map(immigrate_into_population, recvBufDsd_W);  // incorporate into pop
    dispatchRecv_W();
    recvFlag_W = 0;  // open send request has been handled, unset flag
  }

  // apply replication/selection to population
  // --------------------------------------------------------------------------
  do_population_generation();

  // handle send flags, load send buffer from pop and start next async send
  // --------------------------------------------------------------------------
  // must stagger send requests, or else hardware simulation hangs
  // (but only when both vertical AND horizontal exchange enabled)
  // don't know why, but this is a workaround...
  const isEvenCycle: bool = @as(bool, data % 2 == 0);
  const isOddCycle: bool = !isEvenCycle;
  if (isEvenCycle and @as(bool, sendFlag_N)) {
    // note: only first sendBufSize elements of buffer are actually used
    // brutish (wasteful and a biased sample), but works for now
    @fmovs(sendBufDsd_N, populationDsd);  // load up send buffer
    if (y != 0) dispatchSend_N();  // except top row of PE array
    sendFlag_N = 0;  // open send request has been handled, unset flag
  }
  if (isOddCycle and @as(bool, sendFlag_S)) {
    @fmovs(sendBufDsd_S, populationDsd);  // load up send buffer
    if (y != nrow - 1) dispatchSend_S();  // except bottom row of PE array
    sendFlag_S = 0;  // open send request has been handled, unset flag
  }
  if (isEvenCycle and @as(bool, sendFlag_E)) {
    @fmovs(sendBufDsd_E, populationDsd);  // load up send buffer
    sendFlag_E = 0;  // open send request has been handled, unset flag
    // except right col of PE array
    if (x != ncol - 1) dispatchSend_E();
  }
  if (isOddCycle and @as(bool, sendFlag_W)) {
    @fmovs(sendBufDsd_W, populationDsd);  // load up send buffer
    sendFlag_W = 0;  // open send request has been handled, unset flag
    if (x != 0) dispatchSend_W();  // except left col of PE array
  }

  // trigger next cycle
  // --------------------------------------------------------------------------
  cycleCounter[0] = data;  // for telemetry
  if (data < ncycle) {
    @mov16(cycleDsd, data + 1);  // send wavelet to self, trigger next cycle
  } else {
    sys_mod.unblock_cmd_stream();  // terminate
  }
}

// launcher ===================================================================
///////////////////////////////////////////////////////////////////////////////
fn dolaunch() void { // launched by RPC (remote procedure call)
  whoami[0] = peId;  // record layout params for telemetry
  whereami_x[0] = x;
  whereami_y[0] = y;
  random.set_global_prng_seed(peId);
  dispatchRecv_N();  // open initial recv requests
  dispatchRecv_S();  // note: never-filled recv requests on PE array edges ok
  dispatchRecv_E();
  dispatchRecv_W();
  @mov16(cycleDsd, 0);  // send wavelet to self, trigger first cycle
}

// bind tasks =================================================================
///////////////////////////////////////////////////////////////////////////////
comptime {
  @bind_local_task(sendFinalizeTask_N, sendFinalizeTaskID_N);
  @bind_local_task(sendFinalizeTask_S, sendFinalizeTaskID_S);
  @bind_local_task(sendFinalizeTask_E, sendFinalizeTaskID_E);
  @bind_local_task(sendFinalizeTask_W, sendFinalizeTaskID_W);
  @bind_local_task(recvFinalizeTask_N, recvFinalizeTaskID_N);
  @bind_local_task(recvFinalizeTask_S, recvFinalizeTaskID_S);
  @bind_local_task(recvFinalizeTask_E, recvFinalizeTaskID_E);
  @bind_local_task(recvFinalizeTask_W, recvFinalizeTaskID_W);
  @bind_data_task(cycleTask, cycleTaskID);
}

// wavlet routing =============================================================
///////////////////////////////////////////////////////////////////////////////
comptime {
  @set_local_color_config(  // make cycle task wavelet bounce back from router
    cycleColor,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ RAMP } } },
  );

  // note use of color swaps: neighbor's outgoing color -> PE's incoming color
  // here, RAMP means send from router into the computing elmeent or vice versa

  // NORTH / SOUTH (vertical)
  @set_local_color_config(
    sendColor_N,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ NORTH }, .color_swap_y = true } },
  );
  @set_local_color_config(
    sendColor_S,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ SOUTH }, .color_swap_y = true } },
  );
  @set_local_color_config(
    recvColor_N,
    .{ .routes = .{ .rx = .{ NORTH }, .tx = .{ RAMP }, .color_swap_y = true } },
  );
  @set_local_color_config(
    recvColor_S,
    .{ .routes = .{ .rx = .{ SOUTH }, .tx = .{ RAMP }, .color_swap_y = true } },
  );

  // EAST / WEST (horizontal)
  @set_local_color_config(
    sendColor_E,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ EAST }, .color_swap_x = true } },
  );
  @set_local_color_config(
    sendColor_W,
    .{ .routes = .{ .rx = .{ RAMP }, .tx = .{ WEST }, .color_swap_x = true } },
  );
  @set_local_color_config(
    recvColor_E,
    .{ .routes = .{ .rx = .{ EAST }, .tx = .{ RAMP }, .color_swap_x = true } },
  );
  @set_local_color_config(
    recvColor_W,
    .{ .routes = .{ .rx = .{ WEST }, .tx = .{ RAMP }, .color_swap_x = true } },
  );
}

// symbol exports =============================================================
///////////////////////////////////////////////////////////////////////////////
comptime {  // symbols let memcpy gather end-state data from device to host
  @export_symbol(ptr_cycleCounter, "cycleCounter");
  @export_symbol(ptr_recvCounter_N, "recvCounter_N");
  @export_symbol(ptr_recvCounter_S, "recvCounter_S");
  @export_symbol(ptr_recvCounter_E, "recvCounter_E");
  @export_symbol(ptr_recvCounter_W, "recvCounter_W");
  @export_symbol(ptr_sendCounter_N, "sendCounter_N");
  @export_symbol(ptr_sendCounter_S, "sendCounter_S");
  @export_symbol(ptr_sendCounter_E, "sendCounter_E");
  @export_symbol(ptr_sendCounter_W, "sendCounter_W");
  @export_symbol(ptr_genome, "genome");
  @export_symbol(ptr_population, "population");
  @export_symbol(ptr_whoami, "whoami");
  @export_symbol(ptr_whereami_x, "whereami_x");
  @export_symbol(ptr_whereami_y, "whereami_y");
  @export_symbol(dolaunch);

  @rpc(@get_data_task_id(sys_mod.LAUNCH)); // direct remote procedure calls
}
